{"pageProps":{"frontmatter":{"published":true,"title":"TypeScript - Belajar TypeScript","tag":"Programming","date":"October 16 2023","excerpt":"Pada artikel kali ini, saya akan membahas mengenai typescript","cover_image":"/images/posts/TypeScript - Belajar TypeScript.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"},"slug":"typescript-belajar-typescript","content":"\n## Pendahuluan\n\nApa itu sih TypeScript? TypeScript adalah bahasa pemrograman berorientasi objek yang dibuat oleh Microsoft, TypeScript juga adalah bahasa pemrograman yang di kompilasi menjadi kode JavaScript. Oleh karena itu untuk kalian yang ingin belajar TypeScript, sangat disarankan untuk mempelajari JavaScript terlebih dahulu, kenapa? karena nantinya ketika kita membuat program menggunakan TypeScript, pada akhirnya kode tersebut akan di kompilasi atau di ubah menjadi JavaScript.\n\nMengapa menggunakan TypeScript? dengan menggunakan TypeScript akan membuat kode kita lebih mudah dibaca dan di debug dibandingkan menggunakan JavaScript, kenapa? karena TypeScript adalah static language atau Strongly Type (Seperti bahasa pemrograman Java, C# dan C atau C++).\n\nUntuk detail lebih lanjut nya kalian bisa mengunjungi website resmi nya disini [www.typescriptlang.org](https://www.typescriptlang.org).\n\n## Proses Development Bahasa TypeScript\n\n![Proses Development TypeScript](https://mzulkiakbari.alkaysan.co.id/images/posts/assets/belajar_typescript/proses_development_typescript.png)\n\n- Pada tahap pertama, kita akan membuat kode program menggunakan bahasa pemrograman TypeScript.\n- Setelah kode program yang kita buat tersebut, nantinya akan dilakukan kompilasi menggunakan `TypeScript Compiler`.\n- Setelah kode program TypeScript berhasil di compile, maka hasil akhirnya adalah sebuah JavaScript Code.\n\nSehingga kesimpulannya adalah, pada dasarnya kita membuat kode program JavaScript, namun kita membuatnya melalui TypeScript namun nantinya di compile oleh `TypeScript Compiler` untuk dirubah kedalam kode JavaScript.\n\nPertanyaannya, mengapa kita tidak langsung saja menggunakan JavaScript? dengan menggunakan TypeScript, banyak keuntungan yang kita dapat, berikut adalah beberapa keuntungannya.\n\n## Keuntungan Belajar TypeScript\n\n- Saat ini banyak sekali perusahaan yang mulai mengadopsi atau menggunakan TypeScript, hal tersebut karena banyaknya fitur yang dimiliki oleh TypeScript itu sendiri yang memudahkan saat proses pemrograman aplikasi.\n- Karena TypeScript melakukan kompilasi kode menjadi JavaScript, hal ini secara otomatis kita tidak perlu lagi pusing dengan fitur-fitur di JavaScript yang belum di support, karena TypeScript lah yang secara otomatis akan mengurusnya.\n- Selain itu, banyak juga framework-framework yang populer sekarang mulai beralih menggunakan TypeScript, seperti ReactJS, VueJS, NestJS dan lainnya.\n\n## Membuat Project NodeJS\n\nSebelum memulainya, disini kita akan membuat project terlebih dahulu. Untuk membuatnya disini caranya cukup sama dengan membuat project NodeJS pada umumnya.\n\n- **Langkah Pertama**: Buat sebuah folder, misalkan dengan nama `belajar-typescript`\n\n```shell\nmkdir belajar-typescript && cd belajar-typescript\n```\n\n- **Langkah Kedua**: Inisiasi NPM pada folder tersebut\n\n```shell\nnpm init\n```\n\n> **Catatan**: Apabila terdapat prompt untuk mengisikan beberapa informasi, kalian bisa sesuaikan dengan konfigurasi yang saya buat seperti berikut ini\n>\n> ```shell\n> package name: (belajar-typescript)\n> version: (1.0.0)\n> description: Belajar TypeScript Dasar\n> entry point: (index.js)\n> test command:\n> git repository:\n> keywords:\n> author: Arman Dwi Pangestu\n> license: (ISC)\n> ```\n\n- **Langkah Ketiga**: Buka file `package.json` dan tambahkan `type module`\n\nDefault yang akan digunakan adalah CommonJS, oleh karena itu kita perlu mengubah nya menjadi ES Modules\n\n```json\n{\n  \"name\": \"belajar-typescript\",\n  ...\n  \"license\": \"ISC\",\n  \"type\": \"module\"\n}\n```\n\n- **Langkah Keempat**: Menambahkan Library `Jest` untuk Unit Test\n\nUntuk melakukannya cukup jalankan perintah berikut ini:\n\n```shell\nnpm install --save-dev jest @types/jest\n```\n\nApabila kalian ingin mengetahui informasi lebih dari package Jest tersebut, kalian bisa lihat disini [www.npmjs.com/package/jest](https://www.npmjs.com/package/jest)\n\n- **Langkah Kelima**: Menambahkan Library `Babel`, library ini berfungsi agar package `Jest` tersebut support ES Modules\n\nUntuk menambahkannya jalankan perintah berikut ini:\n\n```shell\nnpm install --save-dev babel-jest @babel/preset-env\n```\n\nUntuk melihat detail lebih lengkapnya kalian bisa kunjungi situs berikut ini [babeljs.io/setup#installation](https://babeljs.io/setup#installation)\n\nSetelah library babel terinstall, tambahkan konfigurasi berikut ini pada file `package.json`\n\n```json\n{\n  ...\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"jest\": {\n    \"transform\": {\n      \"^.+\\\\.[t|j]sx?$\": \"babel-jest\"\n    }\n  },\n  ...\n}\n```\n\nSelanjutnya buat file baru dengan nama `babel.config.json` pada root folder.\n\n```shell\ntouch babel.config.json\n```\n\nSetelah itu isikan dengan konfigurasi seperti berikut\n\n```json\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n## Membuat Project TypeScript\n\nSetelah sebelumnya melakukan setup project NodeJS nya, selanjutnya kita perlu mengubah project tesebut menjadi project TypeScript\n\n- **Langkah Pertama**: Menambahkan TypeScript\n\nUntuk menambahkannya jalankan perintah berikut ini:\n\n```shell\nnpm install --save-dev typescript\n```\n\nMengapa kita menginstall TypeScript nya pada development? karena pada akhirnya dia akan di compile menjadi JavaScript, sehingga nantinya ketika program dijalankan kita tidak butuh lagi kode dari TypeScript nya. Untuk informasi lebih lanjut mengenai package typescript tersebut kalian bisa baca disini [www.npmjs.com/package/typescript](https://www.npmjs.com/package/typescript).\n\n- **Langkah Kedua**: Setup TypeScript Project\n\nUntuk melakukan setup project TypeScript jalankan perintah berikut ini:\n\n```shell\nnpx tsc --init\n```\n\nNantinya semua konfigurasi akan dibuat di file `tsconfig.json`. Kemudian ubah konfigurasi dari `\"module\": \"commonjs\"` menjadi `\"module\": \"es6\"`\n\n```json\n{\n  \"compilerOptions\": {\n    ...\n    \"module\": \"ES6\",\n    ...\n  }\n}\n```\n\n- **Langkah Ketiga**: Setup TypeScript untuk Jest\n\nDefault dari Jest digunakan untuk Unit Test JavaScript, namun kita juga ingin menggunakan Jest tapi untuk TypeScript. Nah untuk melakukan setup nya kalian bisa baca lebih lanjut pada website resmi nya disini [jestjs.io/docs/getting-started#using-typescript](https://jestjs.io/docs/getting-started#using-typescript).\n\nUntuk melakukannya jalankan perintah berikut ini:\n\n```shell\nnpm install --save-dev @babel/preset-typescript\n```\n\nKemudian tambahkan konfigurasi berikut pada file `babel.config.json`\n\n```json\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-typescript\"]\n}\n```\n\nSelanjutnya install dependency `ts-jest` menggunakan perintah berikut ini:\n\n```shell\nnpm install --save-dev ts-jest\n```\n\nSetelah itu install dependency `jest/globals` dengan perintah berikut ini:\n\n```shell\nnpm install --save-dev @jest/globals\n```\n\nPada tahap ini kita sudah selesai melakukan setup project untuk Unit Test menggunakan `Jest` dan juga setup project `TypeScript` nya. Untuk melakukan test apakah sudah dapat berjalan atau tidak, kalian bisa membuat folder baru dengan nama `tests` pada root folder. Folder `tests` disini nantinya akan kita gunakan untuk menyimpan setiap file unit test yang akan dibuat.\n\n```shell\nmkdir tests\n```\n\nKemudian buat file dengan nama `hello.test.ts`\n\n```shell\ntouch tests/hello.test.ts\n```\n\nSetelah itu isikan file tersebut dengan kode program berikut ini:\n\n```ts\ndescribe(\"Hello\", function () {\n  it(\"Should say hello\", function () {\n    const name = \"Hello Arman\";\n\n    expect(name).toBe(\"Hello Arman\");\n  });\n});\n```\n\nKemudian jalankan unit test `Jest` menggunakan perintah:\n\n```shell\nnpx jest\n```\n\nMaka hasilnya akan seperti berikut:\n\n```shell\n PASS  tests/hello.test.ts\n  Hello\n    ✓ Should say hello (5 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        1.389 s\nRan all test suites.\n```\n\n## Say Hello Function\n\nSebelum mulai belajar, kita akan coba buat terlebih dahulu sebuah function untuk menampilkan text hello dengan file TypeScript. Untuk melakukannya kalian bisa buat folder baru terlebih dahulu dengan nama `src` pada root folder nya. Folder `src` disini nantinya akan kita gunakan untuk menyimpan setiap file kode program TypeScript nya.\n\n```shell\nmkdir src\n```\n\nKemudian buat file baru dengan nama `say-hello.ts`\n\n```shell\ntouch src/say-hello.ts\n```\n\nSetelah file tersebut dibuat, isikan dengan kode program berikut ini:\n\n```ts\nexport function sayHello(name: String): String {\n  return `Hello ${name}`;\n}\n```\n\nSelanjutnya buatkan sebuah file baru untuk unit test nya di folder `tests` dengan nama file nya adalah `say-hello.test.ts`\n\n```shell\ntouch tests/say-hello.test.ts\n```\n\nIsikan file unit test tersebut dengan kode berikut ini:\n\n> **Catatan**: Perhatikan pada bagian `import`, dapat kalian lihat disini kita tidak perlu memanggil full nama file nya seperti nama extension nya, nah untuk extension tersebut adalah optional, sehingga disini kita tidak perlu lagi memanggil extension nya.\n>\n> Kenapa? karena nantinya kan akan di compile menjadi kode JavaScript, sehingga apabila kita lakukan hardcode dengan nama extension nya (misalkan `.ts`), maka nantinya otomatis tidak akan dapat berjalan.\n\n```ts\nimport { sayHello } from \"../src/say-hello\";\n\ndescribe(\"sayHello\", function (): void {\n  it(\"should return hello arman\", function (): void {\n    expect(sayHello(\"arman\")).toBe(\"Hello arman\");\n  });\n});\n```\n\nSelanjutnya lakukan unit test nya menggunakan perintah:\n\n```shell\nnpm test\n```\n\nMaka output nya akan seperti berikut ini:\n\n```shell\n PASS  tests/say-hello.test.ts\n PASS  tests/hello.test.ts\n\nTest Suites: 2 passed, 2 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        3.737 s\nRan all test suites.\n```\n\n## Kompilasi TypeScript\n\n- Seperti yang dijelaskan di awal, bahwa kode TypeScript tidak bisa langsung dijalankan, kita harus melakukan kompilasi terlebih dahulu agar kode nya menjadi JavaScript.\n- Untuk melakukan kompilasi nya, kita bisa gunakan perintah: `npx tsc`\n- Secara default, semua file hasil kompilasi akan disimpan di lokasi yang sama dengan file TypeScript.\n- Namun, terkadang kebanyakan programmer TypeScript biasanya memisahkan lokasi hasil file kompilasi nya ke sebuah folder terpisah, misalkan `dist` (distribution). Mengapa dipisah? fungsi nya agar hasil kode kompilasi atau javascript nya tidak di commit didalam git repository nya.\n- Untuk mengubah lokasi file hasil kompilasi, kita perlu ubah di file `tsconfig.json`.\n\n### Mengubah Lokasi Hasil Kompilasi\n\nNah untuk mengubah lokasi hasil kompilasi nya, kalian cukup ubah konfigurasi berikut pada file `tsconfig.json`\n\n```json\n{\n  \"compilerOptions\": {\n    ...\n    \"outDir\": \"dist/\"\n    ...\n  }\n}\n```\n\nUntuk mencoba apakah hasil kompilasi TypeScript nya sudah berpindah ke dalam folder `dist/`, kalian bisa jalankan perintah berikut ini:\n\n```shell\nnpx tsc\n```\n\nMaka sekarang dapat kalian lihat pada root folder nya terdapat folder dengan nama `dist/` dan berisi kode JavaScript yang sudah di compile nya.\n\n```\ndist\n├── src\n│  └── say-hello.js\n└── tests\n   ├── hello.test.js\n   └── say-hello.test.js\n```\n\n### Include dan Exclude\n\nSecara default, semua file `.ts` akan coba dikompilasi oleh TypeScript, namun terkadang kita tidak membutuhkan hal tersebut. Misalkan kita hanya ingin melakukan kompilasi untuk kode program dan tidak butuh melakukan kompilasi untuk kode unit testing nya. Nah, dengan menggunakan konfigurasi include dan exlucde ini, kita bisa custom pada file `tsconfig.json` nya, agar kode yang akan di kompilasi spesifik yang ingin kita mau.\n\nUntuk lebih detail nya kalian bisa baca pada website berikut ini:\n\n- [www.typescriptlang.org/tsconfig#include](https://www.typescriptlang.org/tsconfig#include)\n- [www.typescriptlang.org/tsconfig#exclude](https://www.typescriptlang.org/tsconfig#exclude)\n\nMisalkan disini saya ingin menambahkan konfigurasi berikut pada file `tsconfig.json` nya:\n\n```json\n{\n  \"include\": [\"src/**/*\", \"tests/**/*\"],\n  \"exclude\": [\"src/**/*.test.ts\", \"tests/**/*.test.ts\"],\n  \"compilerOptions\": {\n    ...\n  }\n}\n```\n\nPada konfigurasi di atas artinya adalah:\n\n- Kita akan melakukan compile pada semua file yang ada di folder `src/` dan `tests/`\n- Namun kita juga akan melakukan exclude (pengecualian) pada semua file dengan extension `test.ts` yang ada di folder `src/` dan `tests/` agar tidak di compile.\n\nUntuk melihat perubahan nya, kalian bisa hapus terlebih dahulu folder `dist/` nya dengan perintah berikut ini:\n\n```shell\nrm -rf dist/\n```\n\nSetelah folder `dist/` terhapus, sekarang jalankan kembali perintah berikut:\n\n```shell\nnpx tsc\n```\n\nMaka sekarang hasil dari folder `dist/` menjadi seperti berikut ini:\n\n```\ndist\n└── say-hello.js\n```\n\ndapat kalian lihat, file yang di compile hanya yang berada di folder `src/` nya saja, tidak dengan file yang berada di folder `tests/`. Namun karena kita saat ini masih dalam proses belajar, alangkah baiknya compile semuanya terlebih dahulu (termasuk file unit testing nya). Sehingga cukup tambahkan comment pada konfigurasi file `tsconfig.json` nya menjadi seperti berikut ini:\n\n```json\n{\n  \"include\": [\"src/**/*\", \"tests/**/*\"],\n  //\"exclude\": [\"src/**/*.test.ts\", \"tests/**/*.test.ts\"],\n  \"compilerOptions\": {\n    ...\n  }\n}\n```\n\nKemudian jalankan kembali perintah berikut:\n\n```shell\nnpx tsc\n```\n\n## Tipe Data Primitif\n\nTypeScript sebetulnya menggunakan tipe data yang ada di JavaScript, sehingga semua tipe data seperti `string`, `number`, `boolean` otomatis didukung juga oleh TypeScript.\n\n### Daftar Tipe Data Primitif\n\nBerikut adalah daftar tipe data primitif yang ada didalam TypeScript:\n\n| Tipe Data Primitif | Keterangan            |\n| ------------------ | --------------------- |\n| number             | Number di JavaScript  |\n| boolean            | Boolean di JavaScript |\n| string             | String di JavaScript  |\n\nJika dilihat dari keterangan nya, lantas apa bedanya dengan yang ada di JavaScript? bedanya adalah tipe data ini harus di define atau di deklarasikan ketika kita menggunakan TypeScript, sedangkan jika kita menggunakan JavaScript kita bebas membuat parameter atau attribute dengan tipe data apapun dan juga bebas di ubah-ubah. Nah, jika di TypeScript, saat kita sudah tentukan satu tipe data maka kita tidak bisa kita ubah dengan tipe data yang lainnya.\n\n### Deklarasi Variabel\n\nKarena TypeScript adalah Strongly Type Language, oleh karena itu saat kita membuat variabel, kita harus menentukan tipe data variabel nya dan jika kita sudah menentukan tipe datanya, kita tidak boleh mengubah variabel tersebut menjadi tipe data yang berbeda atau yang lainnya. TypeScript secara otomatis mendeteksi tipe data yang sedang digunakan, tetapi kita juga bisa menentukan secara eksplisit menggunakan perintah:\n\n> **Catatan**: Jika kita tidak tentukan secara explicit tipe data nya, maka TypeScript akan otomatis mendeteksi berdasarkan tipe data dari value nya, misalkan jika value nya adalah sebuah string, maka tipe data nya otomatis string, namun jika value nya number maka tipe data nya adalah number.\n\n```ts\nconst namaVariabel: tipedata = value;\nconst namaFunction = function(parameter: tipedata): tipedata {\n  return ...\n}\n```\n\n### Kode: Tipe Data Primitif\n\nMisalkan disini saya mempunyai kode seperti berikut pada file `tests/tipe-data.test.ts`:\n\n```ts\ndescribe(\"Data Type\", function () {\n  it(\"should must declare\", function () {\n    let name: string = \"Arman Dwi Pangestu\";\n    let balance: number = 999999;\n    let isVip: boolean = true;\n\n    console.info(name);\n    console.info(balance);\n    console.info(isVip);\n  });\n});\n```\n\nNah jika kita ubah misalkan menjadi seperti berikut:\n\n```ts\ndescribe(\"Data Type\", function () {\n  it(\"should must declare\", function () {\n    let name: string = \"Arman Dwi Pangestu\";\n    name = 123;\n    let balance: number = 999999;\n    let isVip: boolean = true;\n\n    console.info(name);\n    console.info(balance);\n    console.info(isVip);\n  });\n});\n```\n\nKemudian melakukan compile dengan perintah berikut:\n\n```shell\nnpx tsc\n```\n\nMaka akan muncul error seperti berikut ini:\n\n```ts\ntests/tipe-data.test.ts:4:5 - error TS2322: Type 'number' is not assignable to type 'string'.\n\n4     name = 123;\n      ~~~~\n\n\nFound 1 error in tests/tipe-data.test.ts:4\n```\n\nArtinya, tipe data number pada baris ke 4 tidak bisa diterapkan kedalam tipe data string, karena sudah kita tentukan bahwa variabel `name` tipe datanya adalah string. Kita ubah kembali kode program nya menjadi seperti berikut ini:\n\n```ts\ndescribe(\"Data Type\", function () {\n  it(\"should must declare\", function () {\n    const name: string = \"Arman Dwi Pangestu\";\n    const balance: number = 999999;\n    const isVip: boolean = true;\n\n    console.info(name);\n    console.info(balance);\n    console.info(isVip);\n  });\n});\n```\n\nKemudian jalankan unit test nya menggunakan perintah berikut:\n\n```shell\nnpm test\n```\n\nMaka hasilnya akan sukses seperti berikut:\n\n```ts\n PASS  tests/tipe-data.test.ts\n  ● Console\n\n    console.info\n      Arman Dwi Pangestu\n\n      at Object.info (tests/tipe-data.test.ts:7:13)\n\n    console.info\n      999999\n\n      at Object.info (tests/tipe-data.test.ts:8:13)\n\n    console.info\n      true\n\n      at Object.info (tests/tipe-data.test.ts:9:13)\n```\n\nSelanjutnya kita compile kode typescript nya menggunakan perintah berikut:\n\n```shell\nnpx tsc\n```\n\nDapat kalian lihat pada hasil compile kedalam JavaScript di file `dist/tests/tipe-data.test.js`, bahwa informasi mengenai tipe data tersebut menjadi hilang, karena pada JavaScript tidak ada mengenai deklarasi tipe data. Oleh karena itu, kita bisa menggunakan TypeScript untuk menjaga nya bahwa yang awalnya string, ya sudah string saja (tidak dapat diubah).\n\n```js\n\"use strict\";\ndescribe(\"Data Type\", function () {\n  it(\"should must declare\", function () {\n    const name = \"Arman Dwi Pangestu\";\n    const balance = 999999;\n    const isVip = true;\n\n    console.info(name);\n    console.info(balance);\n    console.info(isVip);\n  });\n});\n```\n\n## Babel TypeScript\n\nUntuk menjalankan unit test, kita mengggunakan Jest dan Babel, banyak programmer TypeScript yang mengeluh ketika proses development menggunakan TypeScript lebih lambat karena harus melakukan kompilasi terlebih dahulu. Oleh karena itu, `@babel/typescript` melakukan cara kompilasi nya dengan cara menghapus seluruh kode TypeScript dan menjadikan kode JavaScript, hal tersebut memang terdengan lucu bukan? tapi itulah kenyataannya.\n\nOleh karena itu, error pada TypeScript yang sering harusnya terjadi di Unit Test terkadang tidak terjadi karena kode TypeScript nya dihapus oleh Babel. Maka dari itu, kita harus secara reguler melakukan pengecekan menggunakan perintah `npx tsc` untuk memastikan tidak ada kode TypeScript kita yang bermasalah.\n\n### Kode: Error TypeScript\n\nMisalkan disini saya mempunyai kode seperti berikut ini:\n\n```ts\ndescribe(\"Data Type\", function () {\n  it(\"should must declare\", function () {\n    let name: string = \"Arman Dwi Pangestu\";\n    let balance: number = 999999;\n    let isVip: boolean = true;\n\n    console.info(name);\n    console.info(balance);\n    console.info(isVip);\n\n    name = 1; // error\n    balance = \"999999\"; // error\n    isVip = 1; // error\n  });\n});\n```\n\nSaat kalian mencoba melakukan compile kode program diatas menggunakan perintah `npx tsc`, maka akan muncul error, namun ketika kalian mencoba menjalankan unit test nya menggunakan perintah `npm test`, maka hasilnya akan success. Kenapa? karena kode TypeScript tersebut semuanya akan di hapus menjadi kode JavaScript. Yang dimana kode tersebut jika dalam bahasa JavaScript akan tetap valid, karena dalam JavaScript variabel apapun menggunakan tipe data apapun.\n\nDapat kita simpulkan, ketika kita membuat kode TypeScript, pastikan jangan hanya melakukan pengecekan menggunakan `Jest` atau `Babel` nya saja, pastikan juga dengan kompilasi dan pastikan juga tidak ada yang error.\n\n### TypeScript Compiler\n\nSebetulnya terdapat cara yang lebih mudah apabila kalian ingin melakukan pengecekan secara regular untuk kompilasi, kalian bisa menjalankan TypeScript Compiler secara terus menerus dengan perintah:\n\n```shell\nnpx tsc --watch\n```\n\nPerintah diatas akan mengecek setiap perubahan pada program kita, apabila terdapat perubahan maka dia akan langsung di compile, sehingga akan langsung diketahui jika terdapat error.\n\n## Tipe Data Array\n\nTipe data Array pada TypeScript itu sama juga dengan yang ada di JavaScript, dari mulai cara pembuatannya dan juga cara penggunaannya. Di TypeScript tipe data Array bisa menggunakan tanda `TipeData[]` atau `Array<TipeData>`.\n\n### Kode: Tipe Data Array\n\nMisalkan disini kita mempunyai sebuah variable `names` array yang isinya adalah string dan variable `values` array yang isinya number. Kalian bisa buat file unit test nya dengan nama `array.test.ts`\n\n```ts\ndescribe(\"Array\", function () {\n  it(\"should same with javascript\", function () {\n    const names: string[] = [\"Arman\", \"Dwi\", \"Pangestu\"];\n    const values: number[] = [1, 2, 3];\n\n    console.info(names);\n    console.info(values);\n  });\n});\n```\n\n## Read Only Array\n\nPada TypeScript, kita bisa membuat sebuah Array dengan tipe readonly atau tidak bisa diubah lagi dengan menggunakan tipe data `ReadonlyArray<TipeData>`. Sehingga jika kalian mempunyai kode program, kemudian kalian mencoba mengubah value dari array dengan readonly, maka akan di reject. Namun, sebetulnya jika kode program nya sudah di ubah menjadi JavaScript, value nya tetap bisa diubah. Sehingga yang menjaga agar value nya tidak bisa diubah si TypeScript compiler nya.\n\n### Kode: Read Only Array\n\n```ts\ndescribe(\"Array\", function () {\n  it(\"should same with javascript\", function () {\n    ...\n  })\n\n  it(\"should support readonly array\", function() {\n    const hobbies: ReadonlyArray<string> = [\"Membaca\", \"Menulis\"];\n    console.info(hobbies);\n\n    hobbies[0] = \"Bermain Game\";\n  })\n})\n```\n\nNah pada kode program yang mengubah value index ke-0 dari array `hobbies` menjadi `Bermain Game`, itu akan muncul error `Index signature in type 'readonly string[]' only permits reading.`\n\n## Tipe Data Tuple\n\nApa itu tipe data Tuple? tuple adalah tipe data Array, namun panjang array dan juga tipe data pada setiap index nya sudah ditentukan. Pada tipe data Tuple ini, kita juga bisa memberikan sifat readonly atau tidak bisa diubah dengan cara menambahkan keyword atau kata kunci `readonly`.\n\n### Kode: Tipe Data Tuple\n\n```ts\ndescribe(\"Array\", function () {\n  it(\"should same with javascript\", function () {\n    ...\n  })\n\n  it(\"should support readonly array\", function() {\n    ...\n  })\n\n  it(\"should support tupple\", function () {\n    const person: readonly [string, string, number] = [\"Arman\", \"Dwi\", 21];\n\n    console.info(person[0]);\n    console.info(person[1]);\n    console.info(person[2]);\n  });\n})\n```\n\nJika kalian mencoba mengubah value dari variable tuple readonly tersebut seperti berikut misalkan:\n\n```ts\n...\n  ...\n    person[0] = \"Something\";\n  ...\n...\n```\n\nMaka akan muncul error `Cannot assign to '0' because it is a read-only property.`.\n\nSehingga dapat kita simpulkan bahwa implementasi tipe data array sebetulnya tetap sama dengan di JavaScript, namun terdapat fitur tambahan pada TypeScript yang mempermudah kita. Dari mulai membuat array biasa, array readonly, sampai dengan tuple (array yang jumlah nya sudah ditentukan dan isi tipe data nya sudah ditentukan juga).\n\n## Tipe Data Any\n\nSaat kita menggunakan TypeScript, setiap jenis data idealnya harus di deklarasikan tipe datanya. Contoh ketika kita ingin menggunakan tipe data JavaScript Object, idealnya harusnya ada ketentuan attribute yang dimilikinya, sedangkan di JavaScript hal itu tidak diwajibkan. Pada kasus kita memang ingin membuat tipe data yang bebas seperti di JavaScript, nah pada TypeScript kita bisa gunakan tipe data `Any`. Tipe data ini menjadikan TypeScript tidak melakukan pengecekan apapun terhadap akses data tersebut.\n\nWalaupun tipe data ini ada, sebaiknya kalian jangan terlalu banyak menggunakan tipe data ini. Kenapa? karena jika kalian terlalu banyak menggunakan tipe data ini, lantas apa bedanya dengan kalian menggunakan JavaScript bukan?\n\nSehingga penggunaan tipe data ini lebih kedalam kondisi urgent atau mendesak yang dimana kita membutuhkan sebuah tipe data dinamis.\n\n### Kode: Tipe Data Any\n\nBuat file unit test baru dengan nama file `any.test.ts`, kemudian isikan file tersebut dengan kode berikut ini:\n\n```ts\ndescribe(\"Any\", function () {\n  it(\"should support in typescript\", function () {\n    const person: any = {\n      id: 1,\n      name: \"Arman Dwi Pangestu\",\n      age: 21,\n    };\n\n    person.age = 22;\n    person.address = \"Indonesia\";\n\n    console.info(person);\n  });\n});\n```\n\n## Tipe Data Union Type\n\nSeperti yang kita ketahui, JavaScript sebetulnya bisa menyimpan berbagai jenis tipe data di variabel yang sama. Namun, di TypeScript hal itu dilarang karena praktek yang buruk. Pada kasus jika kita ingin membuat variabel yang bisa berubah bentuk tipe data, kita bisa memberi tahunya menggunakan `Union Type`. Maka secara otomatis TypeScript akan membolehkan kita mengubah tipe data nya, namun sesuai yang sudah ditentukan di union type nya.\n\n### Kode: Tipe Data Union Type\n\nKalian bisa buat file unit test baru dengan nama `union.test.ts` kemudian isikan dengan kode berikut ini:\n\n```ts\ndescribe(\"Union Type\", function () {\n  it(\"should support in typescript\", function () {\n    let sample: number | string | boolean = \"Arman\";\n    console.info(sample);\n\n    sample = 100;\n    console.info(sample);\n\n    sample = true;\n    console.info(sample);\n  });\n});\n```\n\nNah jika kalian mencoba mengubah value dari variable sample diatas menjadi sebuah array, misalkan seperti berikut ini:\n\n```ts\ndescribe(\"Union Type\", function () {\n  it(\"should support in typescript\", function () {\n    let sample: number | string | boolean = \"Arman\";\n    ...\n\n    sample = [];\n  });\n});\n```\n\nMaka akan muncul error `Type 'never[]' is not assignable to type 'string | number | boolean'.`.\n\n### Menggunakan Union Type\n\nSaat kita membuat union type, kita perlu berhati-hati ketika memanggil method terhadap variable tersebut. Hal ini karena tipe datanya bisa berubah, oleh karena itu ada baiknya kita melakukan pengecekan tipe data terlebih dahulu menggunakan keyword atau kata kunci `typeof`.\n\n### Kode: Menggunakan Union Type\n\nMisalkan disini kita mempunyai sebuah method dengan nama `process`, yang dimana method tersebut mempunyai sebuah parameter dengan nama `value` dan parameter tersebut memperbolehkan tipe data `number`, `string` dan `boolean`. Maka kita bisa gunakan operator `typeof` untuk mengecek tipe data nya.\n\n> **Catatan**: Penggunaan union type ini berfungsi untuk mencegah error, misalkan jika tipe data nya string, maka dia akan mempunyai object method bawaan seperti `toUpperCase()`, nah jika kita tidak menggunakan union type dan yang di kirim adalah sebuah number atau boolean, maka akan error atau undefined, karena tipe data tersebut tidak mempunyai object method bawaan `toUpperCase()` nya. Dan sebaliknya jika tipe data nya adalah number maka mempunyai object method bawaan seperti `toString()` dsb.\n\n```ts\ndescribe(\"Union Type\", function () {\n  it(\"should support in typescript\", function () {\n    ...\n  });\n\n  it(\"should support typeof operator\", function () {\n    function process(value: number | string | boolean) {\n      if (typeof value === \"string\") {\n        return value.toUpperCase();\n      } else if (typeof value === \"number\") {\n        return value + 2;\n      } else {\n        return !value;\n      }\n    }\n\n    expect(process(\"Arman\")).toBe(\"ARMAN\");\n    expect(process(98)).toBe(100);\n    expect(process(true)).toBe(false);\n  });\n});\n```\n\n## Tipe Data Type Alias\n\nKetika menggunakan tipe data Any, sebenarnya hal tersebut tidak direkomendasikan. Biasanya kita akan menggunakan tipe data Any, jika memang data yang akan kita gunakan misal dari library orang lain yang sudah tidak bisa diubah atau memang ketika attribute nya tidak pasti datanya. Contoh nya ketika memanggil data dari sebuah function tetapi return value nya bisa berubah-ubah isi datanya, maka mungkin tipe data Any bisa kita gunakan. Nah, namun pada kasus jika kita membuat tipe data JavaScript object sendiri, yang dimana kita bisa mengontrol isi dari attribute nya terdapat apa saja, maka kita bisa membuat alias untuk struktur tipe data objectnya.\n\n### Kode: Alias\n\nKalian bisa buat file src baru dengan nama file `type-alias.ts`, kemudian isikan dengan kode berikut:\n\n```ts\nexport type Category = {\n  id: string;\n  name: string;\n};\n\nexport type Product = {\n  id: string;\n  name: string;\n  price: number;\n  category: Category;\n};\n```\n\nSehingga nantinya ketika kita mempunyai sebuah object yang struktur nya seperti type diatas, kita bisa gunakan tipe data nya tersebut atau bisa dibilang seperti blueprint atau kerangka nya.\n\n### Kode: Test Alias\n\nSetelah kita membuat kerangka object nya menggunakan type alias, selanjutnya kalian bisa buat file unit test baru dengan nama `type-alias.test.ts` kemudian isikan kode nya seperti berikut ini:\n\n```ts\nimport { Category, Product } from \"../src/type-alias\";\n\ndescribe(\"Type Alias\", function () {\n  it(\"should support in typescript\", function () {\n    const category: Category = {\n      id: \"1\",\n      name: \"Laptop\",\n    };\n\n    const product: Product = {\n      id: \"1\",\n      name: \"MacBook Pro M1\",\n      price: 2000000,\n      category: category,\n    };\n\n    console.info(category);\n    console.info(product);\n  });\n});\n```\n\nNah sebetulnya ketika kode program diatas di compile kedalam JavaScript, maka kode tersebut akan berubah menjadi object biasa di JavaScript, namun kita tidak bisa menambahkan data baru se-enaknya yang tidak di definisikan didalam type alias tersebut, sehingga bisa dibilang lebih safety karena sudah kita buatkan struktur yang harus ada itu apa saja.\n\nJika kalian mencoba memaksa menambahkan data baru seperti berikut:\n\n```ts\nimport { Category, Product } from \"../src/type-alias\";\n\ndescribe(\"Type Alias\", function () {\n  ...\n    ...\n\n    const product: Product = {\n      id: \"1\",\n      name: \"MacBook Pro M1\",\n      price: 2000000,\n      category: category,\n    };\n\n    product.description = \"Test\";\n\n    ...\n  ...\n});\n```\n\nMaka akan muncul error `Property 'description' does not exist on type 'Product'.`\n\n## Type Alias untuk Union Type\n\nType Alias juga bisa kita gunakan untuk membuat union type jika kalian menginginkannya. Caranya bagaimana? caranya kalian bisa gunakan seperti berikut di file `type-alias.ts`:\n\n> **Catatan**: Disini artinya attribute `id` bisa memiliki 2 tipe data, yaitu `string` atau `number`.\n\n```ts\nexport type ID = string | number;\n\nexport type Category = {\n  id: ID;\n  name: string;\n};\n\nexport type Product = {\n  id: ID;\n  name: string;\n  price: number;\n  category: Category;\n};\n```\n\nUntuk mencoba nya, kalian bisa ubah tipe data pada file `type-alias.test.ts` menjadi seperti berikut:\n\n> **Catatan**: Perhatikan pada attribute `id` nya.\n\n```ts\nimport { Category, Product } from \"../src/type-alias\";\n\ndescribe(\"Type Alias\", function () {\n  ...\n    const category: Category = {\n      id: 1,\n      ...\n    };\n\n    const product: Product = {\n      id: \"1\",\n      ...\n    };\n\n    ...\n  ...\n});\n```\n\n## Object Type\n\nPada kasus yang sederhana, terkadang membuat alias itu terlalu bertele-tele, kita juga bisa membuat tipe data JavaScript Object secara langsung dengan mendeklarasikan detail type nya ketika membuat variabel nya. Hal ini lebih sederhana dibandingkan membuat Type terlebih dahulu. Cara penggunaanya sebetulnya cukup sama seperti saat menggunakan type alias, namun pada kasus ini berbeda yang dimana jika kasus nya sederhana dan hanya sekali, kita bisa langsung mendefine atau mendefinisikan attribute dan tipe data apa saja yang ada sebagai tipe data dari property nya, sehingga kita tidak membuat type alias terlebih dahulu. Namun, apabila dalam kasus tipe data nya akan digunakan dibanyak tempat, maka sangat disarankan membuat type terlebih dahulu agar menjadi reusable.\n\n### Kode: Object Type\n\nUntuk membuat nya, kalian bisa membuat sebuah unit test file baru dengan nama `object.test.ts`, kemudian isikan dengan kode seperti berikut ini:\n\n```ts\ndescribe(\"Object\", function () {\n  it(\"should support in typescript\", function () {\n    const person: { id: string; name: string } = {\n      id: \"1\",\n      name: \"Arman\",\n    };\n\n    console.info(person);\n\n    person.id = \"2\";\n    person.name = \"Dwi Pangestu\";\n\n    console.info(person);\n  });\n});\n```\n","posts":[{"slug":"cloud-run-github-actions","frontmatter":{"published":true,"title":"Cloud Run - Implementasi DevOps CI/CD Pipeline Menggunakan GitHub Actions","tag":"DevOps","date":"May 06 2024","excerpt":"Pada artikel ini kita akan melakukan deployment simpel app Express.js menggunakan Cloud Run dan meng-implementasikan CI/CD Pipeline menggunakan GitHub Actions","cover_image":"/images/posts/Cloud Run - Implementasi DevOps CI CD Pipeline Menggunakan GitHub Actions.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"terraform-otomatisasi-deployment-infastructure-menggunakan-terraform","frontmatter":{"published":true,"title":"Terraform - Otomatisasi Deployment Infrastructure Menggunakan Terraform","tag":"Cloud","date":"April 01 2024","excerpt":"Pada pembahasan kali ini saya akan mencoba menggunakan Terraform untuk mendeploy infrastructure pada Google Cloud Platform (GCP)","cover_image":"/images/posts/Terraform - Otomatisasi Deployment Infrastructure Menggunakan Terraform.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"tutorial-docker-instalasi-windows-11","frontmatter":{"published":false,"title":"Tutorial Docker - Instalasi Windows 11","tag":"SysAdmin","date":"February 17 2024","excerpt":"Test Thumbnail","cover_image":"/images/posts/Tutorial Docker - Instalasi Windows 11.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"vmware-workstation-player-instalasi-linux-debian","frontmatter":{"published":true,"title":"VMware Workstation Player - Instalasi Linux Debian","tag":"SysAdmin","date":"February 17 2024","excerpt":"Pada artikel kali ini kita akan mencoba melakukan instalasi Linux Debian pada Virtual Machine yang sudah dibuat pada pembahasan sebelumnya.","cover_image":"/images/posts/VMware Workstation Player - Instalasi Linux Debian.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"vmware-workstation-player-membuat-virtual-machine","frontmatter":{"published":true,"title":"VMware Workstation Player - Membuat Virtual Machine (VM)","tag":"SysAdmin","date":"February 17 2024","excerpt":"Pada artikel kali ini kita akan mencoba membuat sebuah Virtual Machine dengan sistem operasi Linux dengan distro nya adalah Debian pada VMware Workstation Player","cover_image":"/images/posts/VMware Workstation Player - Membuat Virtual Machine.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"vmware-workstation-player-instalasi-di-windows11","frontmatter":{"published":true,"title":"VMware Workstation Player - Instalasi di Windows 11","tag":"SysAdmin","date":"February 8 2024","excerpt":"Pada artikel kali ini kita akan mencoba menginstall VMware Workstation Player pada sistem operasi Windows 11","cover_image":"/images/posts/VMware Workstation Player - Instalasi di Windows 11.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel-eloquent-relationship-has-one-through","frontmatter":{"published":false,"title":"Laravel Eloquent - Relationship Has One Through","tag":"Programming","date":"February 4 2024","excerpt":"Pada artikel kali ini kita akan membahas mengenai Laravel Eloquent Relationship Has One Through","cover_image":"/images/posts/Laravel Eloquent - Relationship Has One Through.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel-eloquent-relationship-advanced-has-one-of-many","frontmatter":{"published":true,"title":"Laravel Eloquent - Relationship Advanced Has One of Many","tag":"Programming","date":"January 30 2024","excerpt":"Pada artikel kali ini kita akan membahas mengenai Laravel Eloquent Relationship Advanced Has One of Many","cover_image":"/images/posts/Laravel Eloquent - Relationship Advanced Has One of Many.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel-eloquent-relationship-has-one-of-many","frontmatter":{"published":true,"title":"Laravel Eloquent - Relationship Has One of Many","tag":"Programming","date":"January 28 2024","excerpt":"Pada artikel kali ini kita akan membahas mengenai Laravel Eloquent Relationship Has One of Many","cover_image":"/images/posts/Laravel Eloquent - Relationship Has One of Many.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel-eloquent-relationship-where-belongs-to","frontmatter":{"published":true,"title":"Laravel Eloquent - Relationship Where Belongs To","tag":"Programming","date":"January 24 2024","excerpt":"Pada artikel kali ini kita akan membahas mengenai Laravel Eloquent Relationship Where Belongs To","cover_image":"/images/posts/Laravel Eloquent - Relationship Where Belongs To.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel-eloquent-relationship-default-models","frontmatter":{"published":true,"title":"Laravel Eloquent - Relationship Default Models","tag":"Programming","date":"January 22 2024","excerpt":"Pada artikel kali ini kita akan membahas mengenai Laravel Eloquent Relationship Default Models","cover_image":"/images/posts/Laravel Eloquent - Relationship Default Models.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel-eloquent-relationship-one-to-many","frontmatter":{"published":true,"title":"Laravel Eloquent - Relationship One to Many","tag":"Programming","date":"January 22 2024","excerpt":"Pada artikel kali ini kita akan membahas mengenai Laravel Eloquent Relationship untuk tipe One to Many atau hasMany","cover_image":"/images/posts/Laravel Eloquent - Relationship One to Many.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel-eloquent-relationship-one-to-one","frontmatter":{"published":true,"title":"Laravel Eloquent - Relationship One to One","tag":"Programming","date":"January 20 2024","excerpt":"Pada artikel kali ini kita akan membahas mengenai Laravel Eloquent Relationship untuk tipe One to One atau hasOne","cover_image":"/images/posts/Laravel Eloquent - Relationship One to One.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-authorization","frontmatter":{"published":true,"title":"Laravel 8 - #23 - Authorization","tag":"Programming","date":"January 7 2024","excerpt":"Pada pembahasan kali ini, kita akan membuat feature terakhir dari sistem blog kita, feature tersebut yaitu Authorization atau Otorisasi, setelah sebelumnya kita sudah membuat feature Autentikasi untuk login dan registrasi, sekarang kita akan membuat agar user yang tadi sudah berhasil registrasi dan juga login itu memiliki peran yang berbeda. Contohnya adalah terdapat user biasa dan juga user administrator.","cover_image":"/images/posts/Laravel 8 - Authorization.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-preview-update-dan-delete-image","frontmatter":{"published":true,"title":"Laravel 8 - #22 - Preview, Update dan Delete Image","tag":"Programming","date":"January 6 2024","excerpt":"Pada pembahasan kali ini kita akan melanjutkan feature pengelolaan gambar pada blog post kita sebelumnya, kali ini kita akan menerapkan 3 buah feature, yaitu preview, update dan delete image.","cover_image":"/images/posts/Laravel 8 - Preview, Update dan Delete Image.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-upload-image","frontmatter":{"published":true,"title":"Laravel 8 - #21 - Upload Image","tag":"Programming","date":"January 6 2024","excerpt":"Pada pembahasan kali ini kita akan mencoba menambahkan sebuah feature untuk melengkapi CRUD dari blog kita, yaitu menambahkan feature upload gambar yang dimana nantinya user dapat mengupload gambar sendiri dari komputer nya untuk menggantikan gambar yang sebelumnya kita ambil dari API nya Unsplash.","cover_image":"/images/posts/Laravel 8 - Upload Image.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-update-dan-delete-post","frontmatter":{"published":true,"title":"Laravel 8 - #20 - Update dan Delete Post","tag":"Programming","date":"January 4 2024","excerpt":"Pada pembahasan kali ini kita akan melengkapi aplikasi blog sederhana kita, setelah sebelumnya kita berhasil menambahkan feature CREATE dan READ data, kali ini kita akan melengkapi lagi dengan menambahkan feature UPDATE dan DELETE, sehingga feature CRUD nya sudah bisa dijalankan semua.","cover_image":"/images/posts/Laravel 8 - Update dan Delete Post.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-validation-dan-insert-post","frontmatter":{"published":true,"title":"Laravel 8 - #19 - Validation dan Insert Post","tag":"Programming","date":"January 4 2024","excerpt":"Setelah sebelumnya kita berhasil membuat sebuah form untuk create blog post kita, pada pembahasan kali ini kita akan mencoba untuk melengkapi nya dengan feature validasi pada form nya dan insert kedalam databasenya.","cover_image":"/images/posts/Laravel 8 - Validation dan Insert Post.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-create-post-form","frontmatter":{"published":true,"title":"Laravel 8 - #18 - Create Post Form","tag":"Programming","date":"January 3 2024","excerpt":"Kali ini kita akan melanjutkan kembali pembuatan feature CRUD pada aplikasi sistem blog sederhana kita, setelah sebelumnya kita berhasil membuat tampilan UI untuk bagian Dashboard kita sambil juga menampilkan data post dari user yang sudah berhasil login, feature tersebut sebetulnya sudah masuk kedalam CRUD yaitu bagian READ nya. Nah, sekarang tersisa 3 lagi yaitu CREATE, UPDATE dan DELETE.","cover_image":"/images/posts/Laravel 8 - Create Post Form.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-dashboard-ui","frontmatter":{"published":true,"title":"Laravel 8 - #17 - Dashboard UI","tag":"Programming","date":"January 2 2024","excerpt":"Setelah sebelumya kita sudah berhasil menambahkan feature login dan registrasi pada aplikasi blog sistem kita. Kali ini kita akan masuk kedalam dashboard dalam aplikasi kita, dimana nantinya kita bisa menambahkan feature pengelolaan postingan kita atau blog post kita seperti menambah, melihat detail, mengubah dan menghapus atau istilah nya disebut dengan CRUD (Create, Read, Update dan Delete) Operation.","cover_image":"/images/posts/Laravel 8 - Dashboard UI.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-user-login-dan-middleware","frontmatter":{"published":true,"title":"Laravel 8 - #16 - User Login dan Middleware","tag":"Programming","date":"January 1 2024","excerpt":"Pada pembahasan kali ini kita akan melanjutkan pembahasan mengenai aplikasi blog kita, setelah sebelumnya kita berhasil membuat feature registrasi untuk user kita. Nah, sekarang saatnya kita akan membuat dan meng-aplikasikan feature login nya, sehingga nantinya user yang berhasil registrasi itu bisa masuk kedalam aplikasi kita. Selain kita membuat feature login, kita juga akan sambil mempelajari featrue `middleware` yang ada didalam Laravel.","cover_image":"/images/posts/Laravel 8 - User Login dan Middleware.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-user-registration","frontmatter":{"published":true,"title":"Laravel 8 - #15 - User Registration","tag":"Programming","date":"December 31 2023","excerpt":"Pada pembahasan kali ini kita akan membuat feature registrasi untuk aplikasi blog laravel kita.","cover_image":"/images/posts/Laravel 8 - User Registration.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-view-login-dan-registration","frontmatter":{"published":true,"title":"Laravel 8 - #14 - View Login dan Registration","tag":"Programming","date":"December 31 2023","excerpt":"Pada pembahasan kali ini kita akan membuat view untuk feature login dan registration. Seperti biasa disini kita akan menggunakan bantuan framework frontend yaitu Bootstrap untuk bagian komponen nya.","cover_image":"/images/posts/Laravel 8 - View Login dan Registration.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-searching-dan-pagination","frontmatter":{"published":true,"title":"Laravel 8 - #13 - Searching dan Pagination","tag":"Programming","date":"December 30 2023","excerpt":"Pada pembahasan kali ini kita akan menambahkan 2 feature keren kedalam aplikasi blog kita yaitu Searching dan Pagination.","cover_image":"/images/posts/Laravel 8 - Searching dan Pagination.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-redesign-ui","frontmatter":{"published":true,"title":"Laravel 8 - #12 - Redesign UI","tag":"Programming","date":"December 29 2023","excerpt":"Pada pembahasan kali ini kita akan istirahat terlebih dahulu untuk mempelajari feature-feature utama yang ada didalam Laravel. Pada pembahasan kali ini kita akan mencoba memperbaiki tampilan halaman web blog kita agar lebih fresh lagi dan lebih mudah untuk digunakan.","cover_image":"/images/posts/Laravel 8 - Redesign UI.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-n1-problem","frontmatter":{"published":true,"title":"Laravel 8 - #11 - N+1 Problem","tag":"Programming","date":"December 28 2023","excerpt":"Pada pembahasan kali ini kita akan membahas sesuatu problem pada query database kita yang sangat berpengaruh terhadap performa aplikasi. Problem tersebut dinamakan N+1 Problem","cover_image":"/images/posts/Laravel 8 - N1 Problem.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-factory-dan-faker","frontmatter":{"published":true,"title":"Laravel 8 - #10 - Factory dan Faker","tag":"Programming","date":"December 27 2023","excerpt":"Pada pembahasan kali ini kita akan membahas sesuatu yang tidak kalah menarik yaitu Factory dan Faker pada Laravel, feature tersebut akan sangat berguna jika kita sedang mendevelop sesuatu yang berhubungan dengan dummy data.","cover_image":"/images/posts/Laravel 8 - Factory dan Faker.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-database-seeder","frontmatter":{"published":true,"title":"Laravel 8 - #9 - Database Seeder","tag":"Programming","date":"December 26 2023","excerpt":"Pada pembahasan kali ini kita akan membahas sesuatu feature yang tidak kalah keren pada Laravel yaitu Seeder","cover_image":"/images/posts/Laravel 8 - Database Seeder.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-post-category-dan-eloquent-relationship","frontmatter":{"published":true,"title":"Laravel 8 - #8 - Post Category dan Eloquent Relationship","tag":"Programming","date":"December 25 2023","excerpt":"Pada pembahasan kali ini kita akan membahas sesuatu yang sangat menarik yaitu mengenai keterhubungan antar tabel atau didalam Laravel itu disebut nya dengan `Eloquent Relationship` (bagaimana hubungan antar model). Sehingga nantinya pada studi kasus sistem blog kita akan menerapkan sebuah category pada setiap post di blog kita.","cover_image":"/images/posts/Laravel 8 - Post Category dan Eloquent Relationship.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-post-model-dan-route-model-binding","frontmatter":{"published":true,"title":"Laravel 8 - #7 - Post Model dan Route Model Binding","tag":"Programming","date":"December 24 2023","excerpt":"Pada pembahasan kali ini kita akan membahas kembali mengenai model didalam Laravel, yang dimana akan kita perbaiki model `Post` kita yang sebelumnya dibuat secara manual, kali ini kita akan coba buat agar model nya dengan cara yang benar yaitu dengan merepresentasikan class model nya sebagai tabel didalam database. Hal tersebut nantinya kita juga harus membuat sebuah migrasi untuk tabel Post tersebut.","cover_image":"/images/posts/Laravel 8 - Post Model dan Route Model Binding.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-database-migration-dan-eloquent","frontmatter":{"published":true,"title":"Laravel 8 - #6 - Database, Migration dan Eloquent","tag":"Programming","date":"December 23 2023","excerpt":"Laravel, sebagai salah satu framework PHP yang paling populer, menyediakan pendekatan yang kuat dan efisien dalam mengelola basis data. Dalam artikel ini, kita akan menjelajahi aspek-aspek kunci terkait database di Laravel, dengan penekanan khusus pada konsep migrasi (migration) dan Eloquent, sistem ORM bawaan Laravel.","cover_image":"/images/posts/Laravel 8 - Database, Migration dan Eloquent.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-model-collection-dan-controller","frontmatter":{"published":true,"title":"Laravel 8 - #5 - Model, Collection dan Controller","tag":"Programming","date":"December 22 2023","excerpt":"Aplikasi yang sudah dibangun sebelumnya itu semua proses nya masih ditangani komponen `routes` kita, contohnya ketika kita melakukan request ke halaman `/posts` untuk menampilkan semua data dari blog post kita dilakukan di dalam routes, begitu pula dengan proses menampilkan halaman views, itu juga dilakukan di dalam routes. Hal tersebut tidak tepat, karena jika kita ingin menerapkan konsep MVC (Model, View, Controller) maka 2 proses tersebut seharusnya kita pisahkan sesuai dengan komponen nya.","cover_image":"/images/posts/Laravel 8 - Model, Collection dan Controller.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-blade-templating-engine","frontmatter":{"published":true,"title":"Laravel 8 - #4 - Blade Templating Engine","tag":"Programming","date":"December 21 2023","excerpt":"Templating Engine adalah sebuah fitur atau tools untuk membantu kita dalam mengelola tampilan halaman web, khususnya untuk sebuah framework dan untuk framework laravel, templating engine nya dinamakan dengan Blade.","cover_image":"/images/posts/Laravel 8 - Blade Templating Engine.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-struktur-folder-routes-dan-view","frontmatter":{"published":true,"title":"Laravel 8 - #3 - Struktur Folder, Routes dan View","tag":"Programming","date":"December 21 2023","excerpt":"Bagaimana struktur folder, routes dan view pada aplikasi Laravel?","cover_image":"/images/posts/Laravel 8 - Struktur Folder, Routes dan View.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-instalasi-dan-konfigurasi","frontmatter":{"published":true,"title":"Laravel 8 - #2 - Instalasi dan Konfigurasi","tag":"Programming","date":"December 20 2023","excerpt":"Bagaimana cara instalasi dan konfigurasi Laravel pada sistem operasi Windows, macOS dan Linux?","cover_image":"/images/posts/Laravel 8 - Instalasi dan Konfigurasi.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"laravel8-apa-itu-laravel","frontmatter":{"published":true,"title":"Laravel 8 - #1 - Apa itu Laravel?","tag":"Programming","date":"December 19 2023","excerpt":"Introduction Laravel 8, apa sih Laravel itu? Apa itu Web Application Framework? Siapa pembuat Laravel? Tujuan Laravel dibuat?","cover_image":"/images/posts/Laravel 8 - Apa itu Laravel.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"git-&-github-menambahkan-ssh-key","frontmatter":{"published":true,"title":"Git & GitHub - Menambahkan SSH Key","tag":"Git","date":"October 31 2023","excerpt":"GitHub saat ini wajib menggunakan SSH Public atau Private keypair untuk melakukan autentikasi dari local (git) ke remote (github), oleh karena itu pada artikel kali ini saya akan membahas bagaimana cara generate SSH key nya.","cover_image":"/images/posts/Git Github - SSH key.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"cloud-computing","frontmatter":{"published":false,"title":"Testing Heading","tag":"Cloud","date":"October 29 2023","excerpt":"Ini adalah testing heading","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"test","frontmatter":{"published":false,"title":"Testing Heading","tag":"Programming","date":"October 29 2023","excerpt":"Ini adalah testing heading","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"typescript-belajar-typescript","frontmatter":{"published":true,"title":"TypeScript - Belajar TypeScript","tag":"Programming","date":"October 16 2023","excerpt":"Pada artikel kali ini, saya akan membahas mengenai typescript","cover_image":"/images/posts/TypeScript - Belajar TypeScript.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"css-belajar-css","frontmatter":{"published":false,"title":"CSS - Belajar CSS","tag":"Programming","date":"October 10 2023","excerpt":"Pada artikel ini Saya akan membahas mengenai CSS seperti anatomi, penempatan dan lainnya","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"sistem-basis-data-1","frontmatter":{"published":false,"title":"Sistem Basis Data - 1","tag":"Programming","date":"October 6 2023","excerpt":"Pada artikel kali ini, saya akan membuat series untuk membahas mengenai Sistem Basis Data","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"cacti-install-cacti-di-ubuntu-server","frontmatter":{"published":true,"title":"Cacti - Instalasi dan Konfigurasi Monitoring Traffic Menggunakan Cacti di Ubuntu Server","tag":"SysAdmin","date":"August 30 2023","excerpt":"Pada artikel ini saya akan melakukan instalasi dan konfigurasi cacti pada sistem operasi Ubuntu Server 22.04","cover_image":"/images/posts/Cacti - Install Cacti di Ubuntu.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"ubuntu-instalasi-dan-konfigurasi-lemp-stack","frontmatter":{"published":false,"title":"Ubuntu - Instalasi dan Konfigurasi LEMP Stack","tag":"Linux","date":"August 30 2023","excerpt":"Pada artikel ini saya akan melakukan instalasi dan konfigurasi LEMP atau Linux, Nginx, MariaDB, dan PHP pada sistem operasi Ubuntu Server 22.04","cover_image":"/images/posts/Ubuntu - Instalasi dan Konfigurasi LEMP Stack.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"monitoring-instalasi-dan-konfigurasi-monitoring-server-menggunakan-grafana-dan-prometheus","frontmatter":{"published":true,"title":"Monitoring - Instalasi dan Konfigurasi Monitoring Server Menggunakan Grafana dan Prometheus","tag":"SysAdmin","date":"August 25 2023","excerpt":"Pada artikel ini saya akan melakukan instalasi dan konfigurasi untuk monitoring server menggunakan Grafana dan Prometheus","cover_image":"/images/posts/Monitoring - Grafana dan Prometheus.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"email-instalasi-dan-konfigurasi-mail-server-dengan-postfix-dovecot-roundcube","frontmatter":{"published":true,"title":"Email - Instalasi dan Konfigurasi Mail Server dengan Postfix, Dovecot dan Roundcube","tag":"SysAdmin","date":"August 23 2023","excerpt":"Pada artikel ini saya akan melakukan instalasi dan konfigurasi untuk mail server menggunakan Postfix, Dovecot dan Roundcube","cover_image":"/images/posts/Email - Instalasi dan Konfigurasi Mail Server dengan Postfix Dovecot dan Roundcube.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"protokol-email-yang-perlu-diketahui","frontmatter":{"published":true,"title":"Email - Protokol Email Yang Wajib Diketahui","tag":"SysAdmin","date":"August 15 2023","excerpt":"Pada artikel ini kita akan membahas protokol email apa saja yang wajib diketahui","cover_image":"/images/posts/Email - Protokol Email Yang Wajib Diketahui.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"powerdns-authoritative-server-sebagai-recursor-untuk-client-dan-melayani-public-domain","frontmatter":{"published":true,"title":"PowerDNS - Authoritative Server Sebagai Recursor Untuk Client dan Melayani Public Domains","tag":"SysAdmin","date":"August 01 2023","excerpt":"Pada artikel ini saya akan melakukan konfigurasi DNS Server (PowerDNS) Authoritative Server agar berfungsi sebagai recursor untuk client dan sekaligus melayani public domains","cover_image":"/images/posts/PowerDNS - Authoritative As Recursor for Clients and serving public domains.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"domain-pointing-ke-vps","frontmatter":{"published":true,"title":"Domain - Pointing ke VPS","tag":"SysAdmin","date":"July 21 2023","excerpt":"Pada artikel ini saya akan melakukan konfigurasi domain dari registrar agar mengarah ke VPS","cover_image":"/images/posts/Domain - Pointing ke VPS.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"powerdns-master-dan-slave","frontmatter":{"published":true,"title":"PowerDNS - Konfigurasi Master dan Slave","tag":"SysAdmin","date":"July 14 2023","excerpt":"Pada artikel ini saya akan melakukan konfigurasi master dan slave pada 2 DNS Server","cover_image":"/images/posts/PowerDNS - Master Slave.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"powerdns-menambahkan-records","frontmatter":{"published":true,"title":"PowerDNS - Menambahkan DNS Records pada DNS Server","tag":"SysAdmin","date":"July 12 2023","excerpt":"Pada artikel ini saya akan menambahkan DNS Records pada DNS Server yang berjalan menggunakan PowerDNS dan backend nya menggunakan MySQL","cover_image":"/images/posts/PowerDNS - Menambahkan Record.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"dns-cara-kerja-dan-jenis-jenis-record","frontmatter":{"published":true,"title":"DNS - Apa itu DNS? Pengertian, Fungsi dan Cara Kerja","tag":"SysAdmin","date":"July 11 2023","excerpt":"Pada artikel ini kita akan membahas apa itu DNS, bagaimana cara kerja DNS dan jenis - jenis record pada DNS","cover_image":"/images/posts/DNS - Jenis Jenis DNS Record.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"powerdns-instalasi","frontmatter":{"published":true,"title":"PowerDNS - Install PowerDNS di Ubuntu Server","tag":"SysAdmin","date":"July 04 2023","excerpt":"Pada artikel ini saya akan membuat langkah - langkah instalasi PowerDNS pada sistem operasi Ubuntu Server","cover_image":"/images/posts/PowerDNS - Install PowerDNS di Ubuntu Server.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"cpanel-error-401","frontmatter":{"published":true,"title":"cPanel - Cara memperbaiki error 401 pada WHM cPanel","tag":"SysAdmin","date":"June 27 2023","excerpt":"Pada artikel ini kita akan melakukan konfigurasi server untuk mengatasi error 401 ketika mengakses WHM cPanel","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"proxmox-installation-process","frontmatter":{"published":true,"title":"Proxmox - #1 Installation Process","tag":"SysAdmin","date":"June 26 2023","excerpt":"Pada artikel ini kita akan melakukan instalasi Proxmox VE","cover_image":"/images/posts/Proxmox - Installation Process.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"ubuntu-server-instalasi-ubuntu-server","frontmatter":{"published":true,"title":"Ubuntu Server - Instalasi Ubuntu Server 22.04","tag":"Linux","date":"June 21 2023","excerpt":"Pada artikel ini kita akan melakukan instalasi pada sistem operasi ubuntu server 22.04","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"powerbeam-m5-400-sebagai-client","frontmatter":{"published":false,"title":"Ubiquiti - PowerBeam M5 400 Sebagai Client (Station Mode)","tag":"Networking","date":"April 23 2023","excerpt":"Pada artikel ini kita akan melakukan konfigurasi pada perangkat antena wireless dari merek Ubiquiti yaitu PowerBeam M5 400 dengan mode station","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"codeigniter-hosting-di-cpanel","frontmatter":{"published":true,"title":"Codeigniter - Hosting di cPanel","tag":"Programming","date":"March 21 2023","excerpt":"Pada artikel ini kita akan melakukan hosting program codeigniter di cPanel","cover_image":"/images/posts/Codeigniter - Hosting di cPanel.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"archlinux-install-xdebug","frontmatter":{"published":true,"title":"Arch Linux - Install Xdebug","tag":"Linux","date":"March 01 2023","excerpt":"Pada artikel ini kita akan melakukan instalasi Xdebug untuk PHP dan berjalan di web server Apache","cover_image":"/images/posts/Arch Linux - Install Xdebug.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"xampp-phpmyadmin-allow-ip-from-remote-access","frontmatter":{"title":"XAMPP - Phpmyadmin Allow Ip From Remote Access","tag":"Setup","date":"Februrary 13 2023","excerpt":"Pada artikel ini kita akan melakukan configurasi phpmyadmin agar dapat diakses melalui ip address","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png","published":true}},{"slug":"codeigniter-configurasi-dasar","frontmatter":{"published":true,"title":"Codeigniter - Configurasi Dasar","tag":"Programming","date":"February 4 2023","excerpt":"Pada artikel ini kita akan melakukan configurasi dasar pada Framework Codeigniter","cover_image":"/images/posts/Codeigniter - Basic Configuration.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"xampp-menambahkan-xdebug","frontmatter":{"published":true,"title":"XAMPP - Menambahkan Xdebug","tag":"Programming","date":"January 25 2023","excerpt":"Pada artikel ini kita akan mencoba menambahkan Xdebug pada configurasi Apache di XAMPP","cover_image":"/images/posts/XAMPP - Install Xdebug.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"archlinux-apache-config-untuk-htaccess","frontmatter":{"published":true,"title":"Arch Linux - Mengaktifkan Mod Rewrite Pada Configurasi Apache","tag":"Linux","date":"January 24 2023","excerpt":"Pada artikel ini kita akan melakukan configurasi apache untuk enable .htaccess","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"php-js-select-option-form-input","frontmatter":{"published":true,"title":"PHP JS - Select Option Form Input","tag":"Programming","date":"January 24 2023","excerpt":"Pada artikel ini kita akan menggabungkan PHP dan JS untuk menangani select option pada form input","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"powershell-install-neovim-dengan-scoop","frontmatter":{"published":true,"title":"PowerShell - Install Neovim Menggunakan Scoop","tag":"Setup","date":"January 24 2023","excerpt":"Pada artikel ini kita akan melakukan instalasi Neovim menggunakan Scoop","cover_image":"/images/posts/neovim.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"powershell-install-oh-my-posh","frontmatter":{"published":true,"title":"PowerShell - Install Oh-My-Posh","tag":"Setup","date":"January 24 2023","excerpt":"Pada artikel ini kita akan melakukan instalasi Oh-My-Posh","cover_image":"/images/posts/ohmyposh.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"olt-command","frontmatter":{"published":true,"title":"OLT - List Perintah atau Command pada OLT","tag":"Networking","date":"January 18 2023","excerpt":"Artikel yang berisi kumpulan perintah atau command untuk perangkat OLT","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"olt-registrasi-onu","frontmatter":{"published":true,"title":"OLT - Registrasi ONU","tag":"Networking","date":"January 18 2023","excerpt":"Pada artikel ini kita akan mencoba melakukan registrasi ONU di OLT","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"php-object-oriented-programming","frontmatter":{"published":true,"title":"PHP - Object Oriented Programming","tag":"Programming","date":"January 18 2023","excerpt":"Object Oriented Programming atau biasa disingkat OOP merupakan sebuah paradigma pada bahasa pemrograman","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"cara-membuat-vlan-pada-interface-router-cisco","frontmatter":{"published":true,"title":"Cisco - Cara Membuat VLAN Pada Interface Router Cisco","tag":"Networking","date":"January 17 2023","excerpt":"Pada artikel ini kita akan mencoba membuat VLAN pada interface router cisco","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"git-&-github-kembali-ke-commit-sebelumnya","frontmatter":{"published":true,"title":"Git - Kembali Ke Commit Sebelumnya","tag":"Git","date":"January 17 2023","excerpt":"Pada artikel ini kita akan mencoba berpindah ke commit sebelumnya pada git","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"git-&-github-multiple-user-account","frontmatter":{"published":true,"title":"Git & GitHub - Multiple User Account","tag":"Git","date":"January 17 2023","excerpt":"Pada artikel ini kita akan melakukan configurasi agar Git & GitHub dapat multiple user akun","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"git-squash-commit","frontmatter":{"published":true,"title":"Git - Squash Commit","tag":"Git","date":"January 17 2023","excerpt":"Pada artikel ini kita akan melakukan Squash pada Commit di Git","cover_image":"/images/posts/default.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"konfigurasi-vlan-access-pada-switch-cisco","frontmatter":{"published":true,"title":"Cisco - Konfigurasi VLAN Access Pada Switch Cisco","tag":"Networking","date":"January 17 2023","excerpt":"Pada artikel ini kita akan melakukan konfigurasi VLAN Access pada Switch Cisco","cover_image":"/images/posts/Cisco - Konfigurasi VLAN Access Pada Switch Cisco.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"konfigurasi-vlan-trunk-pada-switch-cisco","frontmatter":{"published":true,"title":"Cisco - Konfigurasi VLAN Trunk Pada Switch Cisco","tag":"Networking","date":"January 17 2023","excerpt":"Pada artikel ini kita akan melakukan konfigurasi VLAN Trunk pada Switch Cisco","cover_image":"/images/posts/Cisco - Konfigurasi VLAN Trunk Pada Switch Cisco.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}},{"slug":"mikrotik-basic-configuration","frontmatter":{"published":true,"title":"Mikrotik - Basic Configuration","tag":"Networking","date":"January 17 2023","excerpt":"Pada artikel ini kita akan mencoba basic configuration pada Router Mikrotik","cover_image":"/images/posts/Mikrotik - Basic Configuration.png","author_name":"Arman Dwi Pangestu","author_title":"Web Developer","author_image":"/images/posts/author/arman.png"}}]},"__N_SSG":true}